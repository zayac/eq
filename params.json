{"name":"Eq","body":"### Key Concepts\r\nEq is a stream-based functional language designed for solving numerical tasks. The lanugage key concepts are:\r\n* **Explicit separation of concurrent and data-dependent parts of a program.** This allows us to generate an effective parallel code. \r\n* **Introduction of streams**. This allows to design programs using stream networks. It provides a full dataflow network for a compiler. Thus the compiler is able to analyse dataflow and to perform useful optimisations.\r\n* **The usage of LaTeX as a front-end language.** Our goal is to provide language which uses natural mathematical terms for algorithm description.\r\n\r\n### Compiler Details\r\nAt the moment the Eq compiler is under active development. The compiler's front-end is being maintained at the moment. Currently we use Python as a back-end language, however we aim to support multiple backends and to work out performance issues.\r\n\r\n### Build Instructions\r\nIn order to build the compiler do the following:\r\n```\r\n $ cd build/\r\n $ cmake ..\r\n $ make\r\n```\r\n\r\nCompiler supports several build options.\r\nCMake cache variables can be defined:\r\n\r\n* Select either to build the lexer only\r\n```\r\n-DBUILD_LEXER=[ON|<OFF>]\r\n```\r\n* Select compiler's backend\r\n```\r\n-DBACKEND_LANG=[<python>|haskell]\r\n```\r\n* Enable or disable functions as a first-class objects\r\n```\r\n-DFIRST_CLASS_FUNCTIONS=[<ON>|OFF]\r\n```\r\n\r\n### Compiler Test Execution\r\nIn case you want to run a test bundle:\r\n```\r\n$ ctest\r\n```\r\nor\r\n```\r\n$ make test\r\n```\r\n\r\nA verbose output of the build is supported:\r\n```\r\nmake VERBOSE=1\r\n```\r\n\r\nIt's possible to execute tests separately:\r\n* Tests compilation of a correct syntax on different stages (parser, type checking and code generating).\r\n```\r\nctest -R run_test\r\n```\r\n* Tests invalid syntax processing and error handling\r\n```\r\n$ ctest -R fail_test\r\n```\r\n* Looks for memory leaks in the compiler\r\n```\r\nctest -R memory_test\r\n```\r\n\r\n### Examples\r\n* MD5 hash generation can be found in ```tests/md5/md5.tex``` file.\r\n\r\n\r\n### Authors and Contributors\r\nThe idea belongs to the [Compiler Technology and Computer Architecture Group](http://ctca.feis.herts.ac.uk/) of the [University of Hertfordshire](http://www.herts.ac.uk/).\r\n\r\nCurrently the compiler is developed by:\r\n* Pavel Zaichenkov (@zayac)\r\n* Artem Shinkarov (@ashinkarov)","tagline":"A stream-based functional programming language","google":"UA-31469785-1","note":"Don't delete this file! It's used internally to help with page regeneration."}