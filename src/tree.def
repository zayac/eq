/* Copyright (c) 2011 Artem Shinkarov <artyom.shinkaroff@gmail.com>
                      Pavel Zaichenkov <zaichenkov@gmail.com>

   Permission to use, copy, modify, and distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.
  
   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */


/* Tree nodes are defined in this file.  
   1. node identifier
   2. string representation
   3. node class
   4. number of arguments
   5. if has a type property
*/
DEF_TREE_CODE (FUNCTION, "function_node", tcl_misc, 5, true)

/* Used when freeing atomic objects.  */
DEF_TREE_CODE (EMPTY_MARK, "empty_mark", tcl_misc, 0, false)

/* Used to return an error.  */
DEF_TREE_CODE (ERROR_MARK, "error_mark", tcl_misc, 0, false)

/* A node that has insufficient information to be parsed.  */
DEF_TREE_CODE (UNKNOWN_MARK, "unknown_mark", tcl_misc, 0, false)

/* Represents any variable declared.  */
DEF_TREE_CODE (IDENTIFIER, "identifier_node", tcl_misc, 0, true)

/* A pair of expression in an index and value.  */
DEF_TREE_CODE (ITER_PAIR, "iter_pair", tcl_misc, 2, false)

DEF_TREE_CODE (ITER_EXPR, "iter_expr", tcl_misc, 0, false)

/* List of trees, used to represent list of statements
   or list of arguments in the function call.  */
DEF_TREE_CODE (LIST, "tree_list", tcl_misc, 0, false)

/* Type nodes.  */
DEF_TREE_CODE (B_TYPE, "boolean_type", tcl_type, 0, false)
DEF_TREE_CODE (N_TYPE, "natural_type", tcl_type, 0, false)
DEF_TREE_CODE (Z_TYPE, "integer_type", tcl_type, 0, false)
DEF_TREE_CODE (R_TYPE, "real_type",    tcl_type, 0, false)
DEF_TREE_CODE (STRING_TYPE, "string type", tcl_type, 0, false)
DEF_TREE_CODE (FUNCTION_TYPE, "function type", tcl_type, 0, false)

/* ldots can be used in arraytype definition.  */
DEF_TREE_CODE (LDOTS_EXPR, "ldots_expr", tcl_expression, 0, false)

/* Constant nodes.  */

/* Integer constant.  */
DEF_TREE_CODE (INTEGER_CST, "integer_cst", tcl_constant, 0, true)

/* Real constant.  */
DEF_TREE_CODE (REAL_CST, "real_cst", tcl_constant, 0, true)

/* String constant.  */
DEF_TREE_CODE (STRING_CST, "string_cst", tcl_constant, 0, true)

/* Expressions.  */
DEF_TREE_CODE (GENERATOR, "generator_expr", tcl_expression, 2, false)
DEF_TREE_CODE (FILTER_EXPR, "filter_expr", tcl_expression, 2, true)
DEF_TREE_CODE (VERTICAL_EXPR, "vertical_expr", tcl_expression, 2, true)

DEF_TREE_CODE (GENAR_EXPR, "genar_expr", tcl_expression ,2, true)
DEF_TREE_CODE (FUNCTION_CALL, "function_call_node", tcl_expression, 2, true)

/* Arithmetic.  */
DEF_TREE_CODE (PLUS_EXPR, "plus_expr", tcl_expression, 2, true)
DEF_TREE_CODE (MINUS_EXPR, "minus_expr", tcl_expression, 2, true)
DEF_TREE_CODE (DIV_EXPR, "div_expr", tcl_expression, 2, true)
DEF_TREE_CODE (MULT_EXPR, "mult_expr", tcl_expression, 2, true)
DEF_TREE_CODE (MOD_EXPR, "mod_exp", tcl_expression, 2, true)

DEF_TREE_CODE (UMINUS_EXPR, "uminus_exp", tcl_expression, 1, true)
DEF_TREE_CODE (NOT_EXPR, "not_expr", tcl_expression, 1, true)
DEF_TREE_CODE (FORALL, "forall_node", tcl_expression, 1, true)

DEF_TREE_CODE (LOWER, "lower_expr", tcl_expression, 2, true)
DEF_TREE_CODE (CIRCUMFLEX, "circumflex_node", tcl_expression,  2, true)

/* Comparison.  */
DEF_TREE_CODE (EQ_EXPR, "eq_expr", tcl_expression, 2, true)
DEF_TREE_CODE (GT_EXPR, "gt_expr", tcl_expression, 2, true)
DEF_TREE_CODE (LT_EXPR, "lt_expr", tcl_expression, 2, true)
DEF_TREE_CODE (GE_EXPR, "ge_expr", tcl_expression, 2, true)
DEF_TREE_CODE (LE_EXPR, "le_expr", tcl_expression, 2, true)
DEF_TREE_CODE (NE_EXPR, "ne_expr", tcl_expression, 2, true)

/* Shifts.  */
DEF_TREE_CODE (SLEFT_EXPR, "sleft_expr", tcl_expression, 2, true)
DEF_TREE_CODE (SRIGHT_EXPR, "sright_expr", tcl_expression, 2, true)

/* Boolean expressions.  */
DEF_TREE_CODE (BAND_EXPR, "band_expr", tcl_expression, 2, true)
DEF_TREE_CODE (BOR_EXPR, "bor_expr", tcl_expression, 2, true)
DEF_TREE_CODE (XOR_EXPR, "xor_expr", tcl_expression, 2, true)

/* Logical expressions.  */
DEF_TREE_CODE (LAND_EXPR, "land_expr", tcl_expression, 2, true)
DEF_TREE_CODE (LOR_EXPR, "lor_expr", tcl_expression, 2, true)

/* Array expressions.  */
DEF_TREE_CODE (MATRIX_EXPR, "matrix_expr", tcl_expression, 1, true)

/* Related to parallel loop statement.  */
DEF_TREE_CODE (PARALLEL_LOOP_STMT, "parallel_loop_stmt", 
	       tcl_statement, 3, false)
DEF_TREE_CODE (CASE_EXPR, "case_expr", tcl_expression, 2, false)
DEF_TREE_CODE (OTHERWISE_EXPR, "otherwise_expr", tcl_expression, 0, false)

DEF_TREE_CODE (PARALLEL_LOOP_CASES, "parallel_loop_cases", 
	       tcl_expression, 3, true)

/* Match cases.  */
/* A special case used for marking \expr constructions in \match.  */
DEF_TREE_CODE (EXPR_MATCH, "expr_match", tcl_expression, 0, true)

/* Condition statement.  */
DEF_TREE_CODE (IF_STMT, "if_stmt", tcl_statement, 3, false)

/* Type conversion marker.  */
DEF_TREE_CODE (CONVERT_EXPR, "convert_expr", tcl_expression, 2, true)

/* Other statements.  */
DEF_TREE_CODE (RETURN_STMT, "return_stmt", tcl_statement, 1, false)
DEF_TREE_CODE (DECLARE_STMT, "declare_stmt", tcl_statement, 2, true)
DEF_TREE_CODE (ASSIGN_STMT, "assign_stmt", tcl_statement, 2, true)

DEF_TREE_CODE (PRINT_MARK, "print_mark", tcl_statement, 1, false)

/* Dummy statement inserted for techical reason.  */
DEF_TREE_CODE (DUMMY_NODE, "dummy_node", tcl_statement, 0, false)
